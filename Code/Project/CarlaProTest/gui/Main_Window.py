#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 23, 2019 01:50:32 PM CET  platform: Linux
import os
import sys
from tkinter import filedialog

from PIL import ImageTk, Image

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import Main_Window_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Main_Window_support.set_Tk_var()
    top = Toplevel1(root)
    Main_Window_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    Main_Window_support.set_Tk_var()
    top = Toplevel1(w)
    Main_Window_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1618x845+130+19")
        top.minsize(1, 1)
        top.maxsize(1905, 924)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(highlightcolor="black")

        self.Bottom_Frame = tk.LabelFrame(top)
        self.Bottom_Frame.place(relx=0.006, rely=0.899, relheight=0.077
                                , relwidth=0.977)
        self.Bottom_Frame.configure(relief='groove')
        self.Bottom_Frame.configure(text='''State Bar''')

        self.Bottom_Label = tk.Label(self.Bottom_Frame)
        self.Bottom_Label.place(relx=0.456, rely=0.462, height=21, width=500
                                , bordermode='ignore')
        self.Bottom_Label.configure(activebackground="#f9f9f9")
        self.Bottom_Label.configure(text='''Label''')

        self.Center_Frame = tk.LabelFrame(top)
        self.Center_Frame.place(relx=0.167, rely=0.012, relheight=0.882
                                , relwidth=0.816)
        self.Center_Frame.configure(relief='groove')
        self.Center_Frame.configure(text='''Visualise''')

        self.Center_Label = tk.Label(self.Center_Frame)
        self.Center_Label.place(relx=0.015, rely=0.04, height=705, width=1320
                                , bordermode='ignore')
        prog_location = os.path.dirname(__file__)
        photo_location = os.path.join(prog_location, "carla_test_image.jpg")
        global _img0
        top.update()
        self.w = int(self.Center_Label.winfo_width())
        self.h = int(self.Center_Label.winfo_height())
        _img0 = Image.open(photo_location)
        _img0 = _img0.resize((self.w, self.h), Image.ANTIALIAS)

        # print(self.Center_Frame.winfo_width(),self.Center_Frame.winfo_height())
        # print(self.Center_Frame.winfo_reqwidth(), self.Center_Frame.winfo_reqheight())
        print(self.w, self.h)
        print(_img0.size)
        _img0 = ImageTk.PhotoImage(_img0)

        self.Center_Label.configure(image=_img0, anchor=tk.NW)
        self.Center_Label.image = _img0

        self.Center_Label.configure(activebackground="#f9f9f9")

        self.Left_Frame = tk.Frame(top)
        self.Left_Frame.place(relx=0.006, rely=0.024, relheight=0.87
                              , relwidth=0.158)
        self.Left_Frame.configure(relief='groove')
        self.Left_Frame.configure(borderwidth="2")
        self.Left_Frame.configure(relief="groove")

        self.Left_Top_Frame = tk.LabelFrame(self.Left_Frame)
        self.Left_Top_Frame.place(relx=0.078, rely=0.014, relheight=0.224
                                  , relwidth=0.863)
        self.Left_Top_Frame.configure(relief='groove')
        self.Left_Top_Frame.configure(text='''Parameters''')

        self.Label1 = tk.Label(self.Left_Top_Frame)
        self.Label1.place(relx=0.15, rely=0.127, height=21, width=135
                          , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Select what to show''')

        self.Label2 = tk.Label(self.Left_Top_Frame)
        self.Label2.place(relx=0.091, rely=0.303, height=21, width=55
                          , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Original''')

        self.Label3 = tk.Label(self.Left_Top_Frame)
        self.Label3.place(relx=0.095, rely=0.497, height=21, width=49
                          , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Treated''')

        self.Label4 = tk.Label(self.Left_Top_Frame)
        self.Label4.place(relx=0.091, rely=0.667, height=21, width=39
                          , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''Json''')

        self.Checkbutton1 = tk.Checkbutton(self.Left_Top_Frame)
        self.Checkbutton1.place(relx=0.5, rely=0.303, relheight=0.139
                                , relwidth=0.305, bordermode='ignore')
        self.Checkbutton1.configure(activebackground="#f9f9f9")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Check''')
        self.Checkbutton1.configure(variable=Main_Window_support.Checkbutton1_Var)

        self.Checkbutton2 = tk.Checkbutton(self.Left_Top_Frame)
        self.Checkbutton2.place(relx=0.5, rely=0.485, relheight=0.139
                                , relwidth=0.305, bordermode='ignore')
        self.Checkbutton2.configure(activebackground="#f9f9f9")
        self.Checkbutton2.configure(justify='left')
        self.Checkbutton2.configure(text='''Check''')
        self.Checkbutton2.configure(variable=Main_Window_support.Checkbutton2_Var)

        self.Checkbutton3 = tk.Checkbutton(self.Left_Top_Frame)
        self.Checkbutton3.place(relx=0.5, rely=0.667, relheight=0.139
                                , relwidth=0.305, bordermode='ignore')
        self.Checkbutton3.configure(activebackground="#f9f9f9")
        self.Checkbutton3.configure(justify='left')
        self.Checkbutton3.configure(text='''Check''')
        self.Checkbutton3.configure(variable=Main_Window_support.Checkbutton3_Var)

        self.Left_Bottom_Frame = tk.LabelFrame(self.Left_Frame)
        self.Left_Bottom_Frame.place(relx=0.078, rely=0.245, relheight=0.741
                                     , relwidth=0.863)
        self.Left_Bottom_Frame.configure(relief='groove')
        self.Left_Bottom_Frame.configure(text='''File List''')

        self.File_List_Box = ScrolledListBox(self.Left_Bottom_Frame)
        self.File_List_Box.place(relx=0.091, rely=0.037, relheight=0.95
                                 , relwidth=0.891, bordermode='ignore')
        self.File_List_Box.bind('<<ListboxSelect>>', self.onselecteditem)
        self.File_List_Box.configure(background="white")
        self.File_List_Box.configure(font="TkFixedFont")
        self.File_List_Box.configure(highlightcolor="#d9d9d9")
        self.File_List_Box.configure(selectbackground="#c4c4c4")

        for i in range(100):
            self.File_List_Box.insert(1, "Bonjour:" + str(i))

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="File")
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Quit",
            command=top.quit)

        self.sub_menu1 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Settings")
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Original Images Folder",
            command=self.select_Original_Folder)
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Treated Images Folder",
            command=self.select_Treated_Folder)
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Json Files Folder",
            command=self.select_Json_Folder)

        self.sub_menu12 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Run")
        self.sub_menu12.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Start")
        self.sub_menu123 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu123,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="?")
        self.sub_menu123.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="How To Use")
        self.sub_menu123.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="About the Authors")


        self.Checkbutton1.configure(
            command=self.loadFiles)

        self.Checkbutton2.configure(
            command=self.loadFiles)

        self.Checkbutton3.configure(
            command=self.loadFiles)


        print("CheckBox Values:",
              ((Main_Window_support.Checkbutton1_Var.get()), Main_Window_support.Checkbutton2_Var.get(),
               Main_Window_support.Checkbutton3_Var.get()))

        self.loadFiles()

    # print("size List_Box:", self.File_List_Box.size())

    def write_List_Folder_Settings(self, folder_List):
        settings_File_Name = "./config.ini"

        try:
            with open(settings_File_Name, "w") as fp:
                for x in folder_List:
                    fp.write(x + "\n")
        finally:
            fp.close()

    def select_Original_Folder(self):

        folder_List = self.read_List_Folder_Settings()

        original_Folder_Name = filedialog.askdirectory()

        if original_Folder_Name != "":
            folder_List[0] = original_Folder_Name
            print("selected original Folder:", original_Folder_Name)
            self.write_List_Folder_Settings(folder_List)
        else:
            print("No Original Folder Selected")

    def select_Treated_Folder(self):

        folder_List = self.read_List_Folder_Settings()

        treated_Folder_Name = filedialog.askdirectory()

        if treated_Folder_Name != "":
            folder_List[1] = treated_Folder_Name
            print("selected Treated Folder:", treated_Folder_Name)
            self.write_List_Folder_Settings(folder_List)
        else:
            print("No Treated Folder Selected")

    def select_Json_Folder(self):

        folder_List = self.read_List_Folder_Settings()

        json_Folder_Name = filedialog.askdirectory()

        if json_Folder_Name != "":
            folder_List[2] = json_Folder_Name
            print("selected Json Folder:", json_Folder_Name)
            self.write_List_Folder_Settings(folder_List)
        else:
            print("No Json Folder Selected")

    def read_List_Folder_Settings(self):
        settings_File_Name = "./config.ini"
        prog_Location = os.path.dirname(__file__)
        settings_File_Location = os.path.join(prog_Location, settings_File_Name)
        folder_List = []
        try:

            with open(settings_File_Location, "r") as fp:
                line = fp.readline()
                cnt = 1
                while line:
                    print("Line {}: {}".format(cnt, line.rstrip('\n')))
                    folder_List.append(line.rstrip('\n'))
                    line = fp.readline()
                    cnt += 1
        finally:
            fp.close()

        if (len(folder_List) == 0):
            print("No Folder found in settings File")
        else:
            print("Numbers of Folder in settings File:", len(folder_List))
            for x in folder_List:
                print(x)

        return folder_List

    def onselecteditem(self, event):
        the_List_Box = self.File_List_Box
        All_Selected_Item = the_List_Box.curselection()

        if the_List_Box.size_()>0:

            selectedItem = the_List_Box.get(All_Selected_Item[0])
            self.Bottom_Label.configure(text=selectedItem)
            print(selectedItem)

            prog_location = os.path.dirname(__file__)
            photo_location = self.List_Box_Content[selectedItem]
            print("showing pictures located in:", photo_location)
            # global _img0
            # top.update()
            self.w = int(self.Center_Label.winfo_width())
            self.h = int(self.Center_Label.winfo_height())
            _img0 = Image.open(photo_location)
            _img0 = _img0.resize((self.w, self.h), Image.ANTIALIAS)

            # print(self.Center_Frame.winfo_width(),self.Center_Frame.winfo_height())
            # print(self.Center_Frame.winfo_reqwidth(), self.Center_Frame.winfo_reqheight())
            print(self.w, self.h)
            print(_img0.size)
            _img0 = ImageTk.PhotoImage(_img0)

            self.Center_Label.configure(image=_img0, anchor=tk.NW)
            self.Center_Label.image = _img0
            # root.update_idletasks()

        else:
            print("Empty List Nothing to Select")

    def loadFiles(self):
        a=Main_Window_support.Checkbutton1_Var.get()
        b=Main_Window_support.Checkbutton2_Var.get()
        c=Main_Window_support.Checkbutton3_Var.get()
        # print(type(self.File_List_Box))
        self.List_Box_Content = {}
        settings_File_Name = "./config.ini"
        prog_Location = os.path.dirname(__file__)
        settings_File_Location = os.path.join(prog_Location, settings_File_Name)
        # folder_List=[]
        # try:
        #
        #     with open(settings_File_Location,"r") as fp:
        #         line = fp.readline()
        #         cnt = 1
        #         while line:
        #             print("Line {}: {}".format(cnt, line.rstrip('\n')))
        #             folder_List.append(line.rstrip('\n'))
        #             line = fp.readline()
        #             cnt += 1
        # finally:
        #     fp.close()
        #
        # if(len(folder_List)==0):
        #     print("No Folder found in settings File")
        # else:
        #     print("Numbers of Folder in settings File:",len(folder_List))
        #     for x in folder_List:
        #         print(x)

        folder_List = self.read_List_Folder_Settings()

        original_Files_List = []

        treated_Files_List = []

        json_Files_List = []

        all_Files_List = []

        if (a == 1):
            prog_Location = folder_List[0]
            print("fetching Original Images Files in Folder:", prog_Location)

            for r, d, f in os.walk(prog_Location):
                for files in f:

                    if '.jpg' or '.jpeg' or '.png' in files:
                        print(files)
                        original_Files_List.append(files)
                        all_Files_List.append(files)
                        self.List_Box_Content[files] = os.path.join(r, files)

            if (len(original_Files_List)) == 0:
                print("No Original Files Found")

        else:
            print("Original Files Not selected")

        if (b == 1):
            prog_Location = folder_List[1]
            print("fetching Treated Images Files in Folder:", prog_Location)

            for r, d, f in os.walk(prog_Location):
                for files in f:
                    if '.jpg' or '.jpeg' or '.png' in files:
                        print(files)
                        treated_Files_List.append(files)
                        all_Files_List.append(files)
                        self.List_Box_Content[files] = os.path.join(r, files)

            if (len(treated_Files_List)) == 0:
                print("No Treated Files Found")

        else:
            print("Treated Files Not selected")

        if (c == 1):
            prog_Location = folder_List[2]
            print("fetching Json Files in Folder:", prog_Location)

            for r, d, f in os.walk(prog_Location):
                for files in f:
                    if '.json' in files:
                        print(files)
                        json_Files_List.append(files)
                        all_Files_List.append(files)
                        self.List_Box_Content[files] = os.path.join(r, files)

            if (len(json_Files_List)) == 0:
                print("No Json Files Found")
        else:
            print("Json Files Not selected")

        self.File_List_Box.delete(0, tk.END)

        all_Files_List.sort()

        print("Number of files in List_Box:", len(all_Files_List))

        for x in all_Files_List:
            self.File_List_Box.insert(0, x)


# print("size List_Box:", self.File_List_Box.size())
# self.File_List_Box.insert(0,"TESTING")
# print(type(self.File_List_Box))

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

    def size_(self):
        sz = tk.Listbox.size(self)
        return sz


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
